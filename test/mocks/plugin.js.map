{"version":3,"file":"plugin.js","sourceRoot":"","sources":["plugin.ts"],"names":[],"mappings":";;AAAA,mCAAqC;AACrC,wCAAuC;AACvC,+CAAoC;AACpC,4CAA2C;AAS3C,gBAAgC,SAAQ,qBAAY;IAOlD,YAAa,YAAoB;QAC/B,KAAK,EAAE,CAAA;QAEP,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,kBAAkB,CAAA;QAC1C,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,mBAAmB,CAAA;QAC5C,IAAI,CAAC,YAAY,GAAG,YAAY,CAAA;IAClC,CAAC;IAED,KAAK,CAAC,OAAO;QACX,IAAI,CAAC,SAAS,GAAG,IAAI,CAAA;QACrB,OAAO,OAAO,CAAC,OAAO,EAAE,CAAA;IAC1B,CAAC;IAED,KAAK,CAAC,UAAU;QACd,IAAI,CAAC,SAAS,GAAG,KAAK,CAAA;QACtB,OAAO,OAAO,CAAC,OAAO,EAAE,CAAA;IAC1B,CAAC;IAED,WAAW;QACT,OAAO,IAAI,CAAC,SAAS,CAAA;IACvB,CAAC;IAED,KAAK,CAAC,QAAQ,CAAE,IAAY;QAC1B,IAAI,IAAI,CAAC,CAAC,CAAC,KAAK,SAAS,CAAC,IAAI,CAAC,gBAAgB,EAAE;YAC/C,MAAM,MAAM,GAAG,SAAS,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAA;YACpD,IAAI,MAAM,CAAC,WAAW,KAAK,aAAa,EAAE;gBACxC,OAAO,KAAK,CAAC,sBAAsB,CAAC;oBAClC,aAAa,EAAE,eAAe;oBAC9B,UAAU,EAAE,CAAC;oBACb,SAAS,EAAE,KAAK;iBACjB,CAAC,CAAA;aACH;YACD,MAAM,SAAS,GAAG,SAAS,CAAC,mBAAmB,mBAC1C,MAAM,IACT,MAAM,EAAE,IAAI,sBAAS,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,IAC1E,CAAA;YACF,OAAO,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAA;SACnC;aAAM;YACL,OAAO,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAA;SAC9B;IACH,CAAC;IAED,KAAK,CAAC,SAAS,CAAE,MAAc;QAC7B,OAAO,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAA;IAClC,CAAC;IAED,mBAAmB,CAAE,OAAoB;QACvC,IAAI,CAAC,WAAW,GAAG,OAAO,CAAA;IAC5B,CAAC;IAED,qBAAqB;QACnB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,kBAAkB,CAAA;IAC5C,CAAC;IAED,oBAAoB,CAAE,OAAqB;QACzC,IAAI,CAAC,YAAY,GAAG,OAAO,CAAA;IAC7B,CAAC;IAED,sBAAsB;QACpB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,mBAAmB,CAAA;IAC9C,CAAC;IAED,KAAK,CAAC,kBAAkB,CAAE,IAAY;QACpC,OAAO,SAAS,CAAC,kBAAkB,CAAC;YAClC,IAAI,EAAE,KAAK;YACX,WAAW,EAAE,qBAAqB;YAClC,OAAO,EAAE,4BAA4B;YACrC,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;SACtB,CAAC,CAAA;IACJ,CAAC;IAED,KAAK,CAAC,mBAAmB,CAAE,MAAc;QACvC,OAAM;IACR,CAAC;;AA/Ee,kBAAO,GAAG,CAAC,CAAA;AAD7B,6BAiFC","sourcesContent":["import { EventEmitter } from 'events'\nimport * as IlpPacket from 'ilp-packet'\nimport BigNumber from 'bignumber.js'\nimport * as ILDCP from 'ilp-protocol-ildcp'\n\nexport interface DataHandler {\n  (data: Buffer): Promise<Buffer>\n}\nexport interface MoneyHandler {\n  (amount: string): Promise<void>\n}\n\nexport default class MockPlugin extends EventEmitter {\n  static readonly version = 2\n  public dataHandler: DataHandler\n  public moneyHandler: MoneyHandler\n  public exchangeRate: number\n  public connected: boolean\n\n  constructor (exchangeRate: number) {\n    super()\n\n    this.dataHandler = this.defaultDataHandler\n    this.moneyHandler = this.defaultMoneyHandler\n    this.exchangeRate = exchangeRate\n  }\n\n  async connect () {\n    this.connected = true\n    return Promise.resolve()\n  }\n\n  async disconnect () {\n    this.connected = false\n    return Promise.resolve()\n  }\n\n  isConnected () {\n    return this.connected\n  }\n\n  async sendData (data: Buffer): Promise<Buffer> {\n    if (data[0] === IlpPacket.Type.TYPE_ILP_PREPARE) {\n      const parsed = IlpPacket.deserializeIlpPrepare(data)\n      if (parsed.destination === 'peer.config') {\n        return ILDCP.serializeIldcpResponse({\n          clientAddress: 'test.receiver',\n          assetScale: 9,\n          assetCode: 'ABC'\n        })\n      }\n      const newPacket = IlpPacket.serializeIlpPrepare({\n        ...parsed,\n        amount: new BigNumber(parsed.amount).times(this.exchangeRate).toString(10)\n      })\n      return this.dataHandler(newPacket)\n    } else {\n      return this.dataHandler(data)\n    }\n  }\n\n  async sendMoney (amount: string): Promise<void> {\n    return this.moneyHandler(amount)\n  }\n\n  registerDataHandler (handler: DataHandler): void {\n    this.dataHandler = handler\n  }\n\n  deregisterDataHandler (): void {\n    this.dataHandler = this.defaultDataHandler\n  }\n\n  registerMoneyHandler (handler: MoneyHandler): void {\n    this.moneyHandler = handler\n  }\n\n  deregisterMoneyHandler (): void {\n    this.moneyHandler = this.defaultMoneyHandler\n  }\n\n  async defaultDataHandler (data: Buffer): Promise<Buffer> {\n    return IlpPacket.serializeIlpReject({\n      code: 'F02', // Unreachable\n      triggeredBy: 'example.mock-plugin',\n      message: 'No data handler registered',\n      data: Buffer.alloc(0)\n    })\n  }\n\n  async defaultMoneyHandler (amount: string): Promise<void> {\n    return\n  }\n}\n"]}