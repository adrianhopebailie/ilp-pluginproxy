{"version":3,"file":"index.test.js","sourceRoot":"","sources":["index.test.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,iBAAc;AACd,+BAA8B;AAC9B,+BAA6B;AAC7B,wCAA0C;AAC1C,2CAAuC;AACvC,MAAM,YAAY,GAAG,OAAO,CAAC,kBAAkB,CAAC,CAAA;AAChD,QAAQ,CAAC,SAAS,EAAE;IAElB,UAAU,CAAC;;YACT,IAAI,CAAC,UAAU,GAAG,YAAY,CAAC,MAAM,EAAE,CAAA;QACzC,CAAC;KAAA,CAAC,CAAA;IAEF,EAAE,CAAC,mEAAmE,EAAE;QAEtE,MAAM,MAAM,GAAG,IAAI,gBAAU,CAAC,CAAC,CAAC,CAAA;QAChC,MAAM,SAAS,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,SAAS,CAAC,CAAA;QAC9C,MAAM,KAAK,GAAG,IAAI,mBAAW,CAAC;YAC5B,SAAS,EAAE;gBACT,OAAO,EAAE,WAAW;gBACpB,IAAI,EAAE,IAAI;aACX;YACD,OAAO,EAAE;gBACP,QAAQ,EAAE,MAAM;gBAChB,MAAM,EAAE,GAAG;gBACX,SAAS,EAAE,KAAK;gBAChB,UAAU,EAAE,CAAC;aACd;SACF,EAAE,MAAM,CAAC,CAAA;QAEV,KAAK,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;YAC3B,aAAM,CAAC,SAAS,CAAC,UAAU,CAAC,CAAA;QAC9B,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,kFAAkF,EAAE;QAErF,MAAM,MAAM,GAAG,IAAI,gBAAU,CAAC,CAAC,CAAC,CAAA;QAChC,MAAM,SAAS,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,SAAS,CAAC,CAAA;QAC9C,MAAM,KAAK,GAAG,IAAI,mBAAW,CAAC;YAC5B,SAAS,EAAE;gBACT,OAAO,EAAE,WAAW;gBACpB,IAAI,EAAE,IAAI;aACX;YACD,OAAO,EAAE;gBACP,QAAQ,EAAE,MAAM;gBAChB,MAAM,EAAE,GAAG;gBACX,SAAS,EAAE,KAAK;gBAChB,UAAU,EAAE,CAAC;aACd;SACF,EAAE,MAAM,CAAC,CAAA;QAEV,KAAK,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;YAC3B,aAAM,CAAC,SAAS,CAAC,UAAU,CAAC,CAAA;QAC9B,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;AAEJ,CAAC,CAAC,CAAA","sourcesContent":["import 'mocha'\nimport * as sinon from 'sinon'\nimport { assert } from 'chai'\nimport { PluginProxy } from '../src/index'\nimport MockPlugin from './mocks/plugin'\nconst serverHelper = require('./helpers/server')\ndescribe('Exports', function () {\n\n  beforeEach(async function () {\n    this.gRPCServer = serverHelper.create()\n  })\n\n  it('calling connect on the proxy establishes connection on the plugin', function () {\n\n    const plugin = new MockPlugin(1)\n    const pluginSpy = sinon.spy(plugin, 'connect')\n    const proxy = new PluginProxy({\n      connector: {\n        address: '127.0.0.1',\n        port: 1234\n      },\n      account: {\n        relation: 'peer',\n        plugin: '1',\n        assetCode: 'xrp',\n        assetScale: 2\n      }\n    }, plugin)\n\n    proxy.connect().then(value => {\n      assert(pluginSpy.calledOnce)\n    })\n  })\n\n  it('calling connect on the proxy calls establishes connection with defined connector', function () {\n\n    const plugin = new MockPlugin(1)\n    const pluginSpy = sinon.spy(plugin, 'connect')\n    const proxy = new PluginProxy({\n      connector: {\n        address: '127.0.0.1',\n        port: 1234\n      },\n      account: {\n        relation: 'peer',\n        plugin: '1',\n        assetCode: 'xrp',\n        assetScale: 2\n      }\n    }, plugin)\n\n    proxy.connect().then(value => {\n      assert(pluginSpy.calledOnce)\n    })\n  })\n\n})\n"]}